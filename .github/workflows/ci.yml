name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: amos
          POSTGRES_PASSWORD: irembo24
          POSTGRES_DB: irembo
        ports:
          - 5432:5432

      zookeeper:
        image: wurstmeister/zookeeper
        ports:
          - 2181:2181

      kafka:
        image: wurstmeister/kafka
        env:
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        ports:
          - 9092:9092

      clickhouse:
        image: yandex/clickhouse-server
        ports:
          - 8123:8123
          - 9000:9000

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Debug Docker Login
        run: |
          echo "Docker Username: $DOCKER_USERNAME"
          echo "Docker Password: $DOCKER_PASSWORD"
          echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      

      - name: Login to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin

      - name: Build Docker images
        run: docker-compose -f docker-compose.yml build

      - name: Start services
        run: docker-compose -f docker-compose.yml up -d

      - name: Output PostgreSQL logs
        run: docker-compose logs postgres
      

      - name: Wait for services to be ready
        run: |
          # Wait for PostgreSQL to be ready
          docker-compose exec -T postgres sh -c "until pg_isready -U amos; do sleep 1; done"

          # Wait for Kafka to be ready
          docker-compose exec -T kafka sh -c "until nc -z localhost 9092; do sleep 1; done"

          # Wait for ClickHouse to be ready
          docker-compose exec -T clickhouse sh -c "until curl -sSf http://localhost:8123/ > /dev/null; do sleep 1; done"

      - name: Run the app
        run: docker-compose -f docker-compose.yml up -d

      - name: Run tests
        run: |
          docker-compose exec app sh -c "python -m unittest discover -s tests/"
          # Check ClickHouse logs for errors if health check fails (optional)
          if docker logs clickhouse 2>&1 | grep -i error; then
            echo "ClickHouse container errors detected. See logs for details."
            exit 1
          fi

      - name: Stop and remove containers
        run: docker-compose down --volumes --remove-orphans


